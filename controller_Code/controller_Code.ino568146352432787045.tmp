/*author: Selam Gano
 * This is an impedance controller
 * Lever attached to the motor should stay at specified position theta_d, in radians
 * 
 * pins: 
 *inA = 1 
 *inB = 2
 *pwm = 10
 *
 * need to install DualVNH5019MotorShield library if you haven't yet. 
 * 
 * 
 * motor driver documentation: https://github.com/pololu/dual-vnh5019-motor-shield
 */

// Inclde the standard Arduino SPI Library, please ensure the SPI pins are
// connected properly for your Arduino version
#include <SPI.h>

// Slave Select pins for encoders 1 and 2
// Feel free to reallocate these pins to best suit your circuit
const int slaveSelectEnc1 = 7;
const int slaveSelectEnc2 = 8;

// These hold the current encoder count.
signed long encoder1count = 0;
signed long encoder2count = 0;

void initEncoders() {
  
  // Set slave selects as outputs
  pinMode(slaveSelectEnc1, OUTPUT);
  pinMode(slaveSelectEnc2, OUTPUT);
  
  // Raise select pins
  // Communication begins when you drop the individual select signsl
  digitalWrite(slaveSelectEnc1,HIGH);
  digitalWrite(slaveSelectEnc2,HIGH);
  
  SPI.begin();
  
  // Initialize encoder 1
  //    Clock division factor: 0
  //    Negative index input
  //    free-running count mode
  //    x4 quatrature count mode (four counts per quadrature cycle)
  // NOTE: For more information on commands, see datasheet
  digitalWrite(slaveSelectEnc1,LOW);        // Begin SPI conversation
  SPI.transfer(0x88);                       // Write to MDR0
  SPI.transfer(0x03);                       // Configure to 4 byte mode
  digitalWrite(slaveSelectEnc1,HIGH);       // Terminate SPI conversation 

  // Initialize encoder 2
  //    Clock division factor: 0
  //    Negative index input
  //    free-running count mode
  //    x4 quatrature count mode (four counts per quadrature cycle)
  // NOTE: For more information on commands, see datasheet
  digitalWrite(slaveSelectEnc2,LOW);        // Begin SPI conversation
  SPI.transfer(0x88);                       // Write to MDR0
  SPI.transfer(0x03);                       // Configure to 4 byte mode
  digitalWrite(slaveSelectEnc2,HIGH);       // Terminate SPI conversation 
}

long readEncoder(int encoder) {
  
  // Initialize temporary variables for SPI read
  unsigned int count_1, count_2, count_3, count_4;
  long count_value;  
  
  // Read encoder 1
  if (encoder == 1) {
    digitalWrite(slaveSelectEnc1,LOW);      // Begin SPI conversation
    SPI.transfer(0x60);                     // Request count
    count_1 = SPI.transfer(0x00);           // Read highest order byte
    count_2 = SPI.transfer(0x00);           
    count_3 = SPI.transfer(0x00);           
    count_4 = SPI.transfer(0x00);           // Read lowest order byte
    digitalWrite(slaveSelectEnc1,HIGH);     // Terminate SPI conversation 
  }
  
  // Read encoder 2
  else if (encoder == 2) {
    digitalWrite(slaveSelectEnc2,LOW);      // Begin SPI conversation
    SPI.transfer(0x60);                      // Request count
    count_1 = SPI.transfer(0x00);           // Read highest order byte
    count_2 = SPI.transfer(0x00);           
    count_3 = SPI.transfer(0x00);           
    count_4 = SPI.transfer(0x00);           // Read lowest order byte
    digitalWrite(slaveSelectEnc2,HIGH);     // Terminate SPI conversation 
  }
  
  // Calculate encoder count
  count_value = (count_1 << 8) + count_2;
  count_value = (count_value << 8) + count_3;
  count_value = (count_value << 8) + count_4;
  
  return count_value;
}

void clearEncoderCount() {
    
  // Set encoder1's data register to 0
  digitalWrite(slaveSelectEnc1,LOW);      // Begin SPI conversation  
  // Write to DTR
  SPI.transfer(0x98);    
  // Load data
  SPI.transfer(0x00);  // Highest order byte
  SPI.transfer(0x00);           
  SPI.transfer(0x00);           
  SPI.transfer(0x00);  // lowest order byte
  digitalWrite(slaveSelectEnc1,HIGH);     // Terminate SPI conversation 
  
  delayMicroseconds(100);  // provides some breathing room between SPI conversations
  
  // Set encoder1's current data register to center
  digitalWrite(slaveSelectEnc1,LOW);      // Begin SPI conversation  
  SPI.transfer(0xE0);    
  digitalWrite(slaveSelectEnc1,HIGH);     // Terminate SPI conversation   
  
  // Set encoder2's data register to 0
  digitalWrite(slaveSelectEnc2,LOW);      // Begin SPI conversation  
  // Write to DTR
  SPI.transfer(0x98);    
  // Load data
  SPI.transfer(0x00);  // Highest order byte
  SPI.transfer(0x00);           
  SPI.transfer(0x00);           
  SPI.transfer(0x00);  // lowest order byte
  digitalWrite(slaveSelectEnc2,HIGH);     // Terminate SPI conversation 
  
  delayMicroseconds(100);  // provides some breathing room between SPI conversations
  
  // Set encoder2's current data register to center
  digitalWrite(slaveSelectEnc2,LOW);      // Begin SPI conversation  
  SPI.transfer(0xE0);    
  digitalWrite(slaveSelectEnc2,HIGH);     // Terminate SPI conversation 
}

//**********PROGRAM START*****************

//set your desired angle:
const float theta_d = 3.14159;

//pins
const int motorA = 2;
const int motorB = 4;
const int motorPWM = 9;

//properties taken from Faulhauber data sheet
const float R = 8.0; //winding resistance, ohms
const float kb = 0.884; //back emf, mV/min
const float ki = 0.118; //current constant

//set gains
float k = 0; //torque control position gain
float b = 0; //torque control velocity gain
float k_p = 0; //proportional gain for current

void setup() {
  Serial.begin(9600);
 initEncoders();       Serial.println("Encoders Initialized...");  
 clearEncoderCount();  Serial.println("Encoders Cleared...");
  pinMode(motorA, OUTPUT);
  pinMode(motorB, OUTPUT);
  pinMode(motorPWM, OUTPUT);

  
}



void loop() {

  fwd(0.5);
  delay(500);
  encoder2count = readEncoder(2);
  Serial.print(" Enc2: "); Serial.println(encoder2count); 
  halt();
  delay(500);
  back(0.1);
  delay(500);
  encoder2count = readEncoder(2);
  Serial.print(" Enc2: "); Serial.println(encoder2count); 
  halt();
  delay(500);
  
  


/*
//get parameters
float theta_k = getAngle();
float w = getVelocity();
float i_k = getCurrent();

//calculations
float theta = theta_k - theta_d;

float tau = -k*theta + b*w; //control law
float i_d = tau/ki; //desired current from torque control/torque-to-current constant

float v = R*i_d + k_p*(i_d - i_k) + kb*w;  //commanded velocity

//TODO: will need to choose whether to manipulate the velocity in loop() 
//or in fwd/back functions....

//theoretically it should move to its position and stop
//and also fight you if you try to push it out the way.
*/

}

//*************TO IMPLEMENT*******************

float getCurrent() {
  //get a current reading
  return 0;
}

float getVelocity() {
  //put encoder data manipulation here
  //should output with units of rad/s 

  return 0;
}

float getAngle() { 
  //put encoder data manipulation here
  //should output with units of radians

  return 0;
}

void fwd(float speed) {
  //Expects speed input between 0 and 1
  //speed must be between 0 and 90 for clockwise

  speed = speed*255;
  
  digitalWrite(motorA, 1);
  digitalWrite(motorB, 0);
  analogWrite(motorPWM, speed);
}

void back(int speed) { 
  speed = speed*255;
  
  digitalWrite(motorA, 0);
  digitalWrite(motorB, 1);
  analogWrite(motorPWM, speed);
}

void halt(){
  digitalWrite(motorA, 0);
  digitalWrite(motorB, 0);
}

